#define _CRT_SECURE_NO_WARNINGS
#include <windows.h> //sleep
#include "menu.h"

int main_menu()
{
	char menu;
	while (1) {
		system("cls");
		printf("┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
		printf("┃                                             ┃\n");
		printf("┃	     차량 정산 프로그램 v1.3          ┃\n");
		printf("┃                                             ┃\n");
		printf("┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛");
		printf("\n");
		printf("\n");
		printf("\n");
		printf("\n");
		printf("\n");
		printf("           ┏━━━━━━━━━━━━━━━━━━━━━┓\n");
		printf("           ┃   1. 차량번호 조회  ┃\n");
		printf("           ┗━━━━━━━━━━━━━━━━━━━━━┛\n");
		printf("\n");
		printf("           ┏━━━━━━━━━━━━━━━━━━━━━┓\n");
		printf("           ┃   2. 정산           ┃\n");
		printf("           ┗━━━━━━━━━━━━━━━━━━━━━┛\n");
		printf("\n");
		printf("\n");
		printf("\n");
		printf("\n");
		printf("	    선택: ");
		if (scanf(" %c", &menu) == 0 || (menu != '1' && menu != '2')) {	//만약 입력값에 문자가 포함되거나 1과 2가 아닌 다른 숫자를 입력했을 경우 재입력하도록 처리 
			printf("잘못 입력하셨습니다.\n");								//scanf로 입력받을 시에 직접적으로 사용되지 않는 문자들(공백, 줄바꿈 등)은 버퍼에 그대로 남아있게 되는데,
			printf("1번 또는 2번 메뉴를 선택해 주십시오.\n");				// %c가 그것들을 사용하려고 해서 그렇다.%c앞에 공백을 하나 넣어주면, 이러한 문자들을 버리고 입력 받음
			rewind(stdin);	//입력버퍼를 지우기 위해 사용
			system("pause");
			continue;
		}
		break;
		printf("\n");
		return menu;
	}
	//-> 차량번호 입력(숫자 네자리 입력하지 않으면 다시 입력창) -> 차량번호, 입차시간 출력 ( / 1.홈화면)
			//반복문(차량번호 입력 -> 차량번호를 확인해주세요.(1.다음)) // -> 

			//1. : 출차시간을 입력해주세요 -> 입차,출차,이용시간,금액 출력// 현금이나 카드를 넣어주세요 1.현금 2.카드 )     //2. : 메인메뉴 출력

	//1.현금을 넣어주세요(지폐만 가능) -> 1.> /....영수증을 출력하시겠습니까?(1.예/ 2.아니오) -> 감사합니다 안녕히가십시오.
	//2.카드를 ic칩 방향으로 넣어주세요 ... 결제중입니다...영수증을 출력하시겠습니까?(1.예/ 2.아니오) ->감사합니다 안녕히가십시오.

}

int insert_carnum(PARKING car) {

	while (1) {
		system("cls");
		show_title();
		printf("\n");
		printf("\n");
		printf("\n");
		printf("\n");
		printf("\n");
		printf("      ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
		printf("      ┃ 차량번호 네자리를 입력해주세요. ┃\n");
		printf("      ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
		printf("\n");
		printf("\n");
		printf("		   ");
		if (scanf("%d", &car.car_num) == 0) {
			rewind(stdin);
		}
		else {
			break;
		}
		printf("\n");
		printf("\n");
		printf("\n");
	}
	return car.car_num;
}
void show_title() {
	printf("┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
	printf("┃                                             ┃\n");
	printf("┃	     차량 정산 프로그램 v1.3          ┃\n");
	printf("┃                                             ┃\n");
	printf("┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛");
	printf("\n");
}

void pay(PARKING car) {

	int num;
	int total = 0;
	printf("		 요금: %d 원\n", car.pay.fee);
	printf("         ┃                           ┃\n");
	printf("         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
	printf("\n");
	printf("           결제방식을 선택해주세요.\n");
	printf("\n");
	printf("          1.현금	       2.카드\n");
	printf("\n");
	printf("           ");
	scanf("%d", &num);
	if (num == 1) {
		system("cls");
		while (1) {
			system("cls");
			show_title();
			printf("\n");
			printf("\n");
			printf("\n");
			printf("      ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
			printf("      ┃	       금액을 투입하세요.       ┃\n");
			printf("      ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");   // 이용 금액 투입
			printf("\n");
			printf("		     ");
			scanf("%d", &car.pay.cost);              // 투입할 금액 입력 
			total += car.pay.cost;
			printf("\n");
			printf("\n");
			if (car.pay.fee == total) {  // 이용금액과 투입 금액이 같을때 결제 완료가 되었다는 조건문을 작성
				printf("	     결제가 완료 되었습니다.\n");
				break;
			}
			else if (car.pay.fee < total) {  // 투입 금액이 이용 금액보다 많을 때 거스름돈 금액을 출력
				printf("	     거스름돈 %d원입니다.\n", total - car.pay.fee);
				break;
			}
			else if (car.pay.fee > total) { // 투입 금액이 부족할 때 금액이 부족하다는 문구를 출력과 동시 재입력으로 되돌아감
				printf("	투입 금액 %d 원이 부족합니다.\n", car.pay.fee - total);
				printf("\n");
				printf("\n");
				Sleep(2000);
				continue;
			}
		}
	}
	else if (num == 2) {		//출력만 함
		system("cls");
		show_title();
		printf("\n");
		printf("      ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
		printf("      ┃  카드를 리더기에 넣어주세요.    ┃\n");
		printf("      ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
		printf("\n");
		printf("        결제중입니다. 카드를 뽑지 마세요.\n");
		printf("\n");
		Sleep(3000); // sec - ms - us - ns	//딜레이
		printf("		     ㆍ\n");
		Sleep(600);
		printf("		     ㆍ\n");
		Sleep(600);
		printf("		     ㆍ\n");
		Sleep(600);
		printf("	     결제가 완료 되었습니다.\n");
	}
	printf("\n");
	printf("\n");
	printf("\n");
	printf("\n");
	printf("	      영수증을 받아가세요. \n");
	printf("\n");
	printf("\n");
	printf("\n");
	system("pause");
	for (int i = 5; i > 0; i--) {
		system("cls");
		receipt(car);
		printf("\n");
		printf("\n");
		printf("%d초 뒤에 홈화면으로 넘어갑니다.", i);
		Sleep(1000);
	}
}

void show_ent_time(PARKING car) {
	printf("\n");
	printf("\n");
	printf("\n");
	printf("\n");
	printf("\n");
	printf("         ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
	printf("         ┃                           ┃\n");
	printf("             차량 번호: %d        \n", car.car_num);
	printf("\n");
	printf("             입차 시간: %d 시 %d 분 \n", car.time.ent_hour, car.time.ent_min);
	printf("         ┃                           ┃\n");
	printf("         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
	printf("\n");
	printf("\n");
	printf("\n");
	printf("\n");
}

void insert_exit_time() {
	printf("\n");
	printf("\n");
	printf("\n");
	printf("	      <<  예시: 00:00  >>\n");
	printf("\n");
	printf("        ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
	printf("        ┃    출차시간을 입력하세요.  ┃\n");
	printf("        ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
	printf("\n");
	printf("\n");
	printf("		    ");
}

void cal_fee(PARKING car) {
	if (car.time.hour < 1 || (car.time.hour == 1 && car.time.min == 0)) {
		printf("		  요금: %d 원\n", car.pay.fee);
		printf("         ┃                           ┃\n");
		printf("         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
		printf("\n");
		printf("\n");
		printf("	    한시간 이하는 무료입니다.\n");
	}
	else if (car.time.min == 0) {				//30분당 500원씩 부과
		car.pay.fee = (((car.time.hour * 60) + car.time.min) / 30 * 500) - 1000;		//
		/*printf("요금: %d원\n", fee);*/
		pay(car);
	}
	else if (car.time.min > 0 && car.time.min <= 30) {	//1분~30분일 경우 반올림 함	예)10분일경우에도 30분, 25분일 경우에도 30분으로 계산
		car.pay.fee = (((car.time.hour * 60) + 30) / 30 * 500) - 1000;
		/*printf("요금: %d원\n", fee);*/
		pay(car);
	}
	else {								//31~59분일 경우 시간 반올림 예) 이용시간이 2시간 35분이면 3시간으로 계산
		car.pay.fee = ((((car.time.hour + 1) * 60)) / 30 * 500) - 1000;
		pay(car);
	}
}

void receipt(PARKING car) {
	printf("        ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n");
	printf("        ┃                            ┃\n");
	printf("		영수증[고객용]\n");
	printf("\n");
	printf("	  kb주차장\n");
	printf("	  대구광역시 동구\n");
	printf("         ────────────────────────────\n");
	printf("          [입차시간] : %d시 %d분 \n", car.time.ent_hour, car.time.ent_min);
	printf("\n");
	printf("          [출차시간] : %d시 %d분 \n", car.time.exit_hour, car.time.exit_min);
	printf("\n");
	printf("          [이용시간] : %d시간 %d분\n", car.time.hour, car.time.min);
	printf("\n");
	printf("          [결제금액] : %d원 \n", car.pay.fee);
	printf("        ┃                            ┃\n");
	printf("        ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n");
	printf("\n");
	printf("\n");
	printf("	   이용 해주셔서 감사합니다\n");
	printf("\n");
}